# Install and configure PostgreSQL including setup our user & database
---

- block:
    - dynamic_defaults:
        hostvars: '{{ hostvars[inventory_hostname] }}'
        defaults: '{{ postgresql_dynamic_defaults }}'
        must_match: yes

    - name: Add TimescaleDB to shared preload libraries
      ansible.builtin.set_fact:
        postgresql_shared_preload_libraries: '{{ postgresql_shared_preload_libraries|union(["timescaledb"]) }}'
      when: "'timescaledb' in postgresql_extensions"
  tags: [postgresql, always]

- include_tasks: setup-{{ ansible_pkg_mgr }}.yml
  tags: [postgresql, packages]

- block:
    - name: Initialize PostgreSQL
      ansible.builtin.command: >
        sudo -u postgres {{ postgresql_bin_directory }}/initdb
        --pgdata {{ postgresql_data_directory }}
        {{ postgresql_initdb_options|join(' ') }}
      args:
        creates: '{{ postgresql_data_directory }}/PG_VERSION'
      # become_user: postgres
      environment:
        PATH: '{{ postgresql_bin_directory }}:$PATH'
        LD_LIBRARY_PATH: '{{ postgresql_lib_directory }}:$LD_LIBRARY_PATH'

    - name: Create PostgreSQL directories
      ansible.builtin.file:
        path: '{{ item }}'
        owner: postgres
        group: postgres
        mode: '700'
        state: directory
      loop:
        - '{{ postgresql_data_directory }}/conf.d'

    - name: Configure PostgreSQL
      ansible.builtin.template:
        src: '{{ postgresql_config_file }}'
        dest: '{{ postgresql_config_directory }}/postgresql.conf'
        mode: '644'
      notify: restart postgresql

    - name: Configure PostgreSQL allowed hosts
      ansible.builtin.template:
        src: pg_hba.conf.j2
        dest: '{{ postgresql_config_directory }}/pg_hba.conf'
        mode: '640'
      notify: restart postgresql

    # Apply configuration now!
    - meta: flush_handlers
  become: true
  tags: [postgresql, config]

- name: Start PostgreSQL service
  ansible.builtin.service:
    name: '{{ postgresql_service }}'
    enabled: true
    state: started
  become: true
  tags: [postgresql, services]

- name: Install PG Repack packages
  ansible.builtin.package:
    name:
      - 'postgresql-{{ postgresql_version }}-repack'
    state: present
  become: true
  tags: [postgresql, packages]
  when: "'pg_repack' in postgresql_extensions"

- block:
    - name: Install PostGIS packages
      ansible.builtin.package:
        name:
          - postgis
          - 'postgresql-{{ postgresql_version }}-postgis-2.1'
          - 'postgresql-{{ postgresql_version }}-postgis-2.1-scripts'
        state: present

    - name: Install geolocation prerequisites required for all back-ends
      ansible.builtin.package:
        name:
          - binutils
          - libgeos-3.4.2
          - libgeos-c1
          - libgeos-dev
        state: present

    - name: Install geolocation prerequisites required for PostgreSQL and SQLite
      ansible.builtin.package:
        name:
          - libproj-dev
          - proj-bin
          - proj-data
        state: present

    - name: Install geolocation prerequisites optional but required for SQLite
      ansible.builtin.package:
        name:
          - gdal-bin
          - libgdal1-dev
          - python3-gdal
        state: present

    - name: install optional IP-based geolocation library
      package:
        name:
          - libgeoip1
        state: present
  become: true
  tags: [postgresql, packages]
  when: "'postgis' in postgresql_extensions"

- block:
    - include_tasks: setup-timescaledb-repository-{{ ansible_pkg_mgr }}.yml

    - name: Install TimescaleDB packages
      ansible.builtin.package:
        name: '{{ postgresql_timescaledb_packages }}'
        state: present
  become: true
  tags: [postgresql, packages]
  when: "'timescaledb' in postgresql_extensions"

- include_role:
    name: postgresql-databases
  tags: [postgresql, databases]
  vars:
    postgresql_databases_role_action: setup
  when: postgresql_is_master|bool

...
